<?php

namespace tests\unit\models;

use app\models\AppInfo;
use app\models\ComponentInfo;
use Codeception\Test\Unit;

class ComponentInfoTest extends Unit
{
    private static $appId;

    protected function setUp()
    {
        return parent::setUp();
    }

    protected function tearDown()
    {
        parent::tearDown();
        ComponentInfo::deleteAll();
    }

    public static function setUpBeforeClass()
    {
        self::$appId = 'wx836d8c653bd41442';
    }

    public static function tearDownAfterClass()
    {
        parent::tearDownAfterClass(); // TODO: Change the autogenerated stub
    }

    /**
     * 测试 component表插入操作
     * @throws \Exception
     */
    public function testInsert()
    {
        $componentInfo = new ComponentInfo();
        $componentInfo->appId = self::$appId;
        $componentInfo->infoType = 'component_verify_ticket';
        $componentInfo->verifyTicket = 'ticket@@@ml8hO4JsNqxX1lFKkH7FURkRV03nLxxPXP4UOz2qhljqQ9tMFlw3XGluXCIiDKfRJRTMZh8H-2ScYhm3ZVHthA';
        $componentInfo->zeroUpdatedAt = 1478003450;
        $componentInfo->accessToken = 'd-BU4sdj6ZCr8WAaaGsMKJsm-XaidO_YlbeJj6w-DrF6Q_G4nhltZ47wKFHuD9eZIPLZ8BuPoxqUjkcjYL5FJ5l_w6i4FVC9DEimWXjNZx5Zb8TP68YWYgQkp3j_45imIGZcAHAECV';
        $componentInfo->zeroExpiresIn = 7200;
        $componentInfo->oneUpdatedAt = 1477999081;
        $this->assertEquals(true, $componentInfo->insert(), 'component insert db fail');

    }

    /**
     * 测试 component表更新操作
     */
    public function testUpdate()
    {
        $this->componentInfoInsert();
        $flag = ComponentInfo::updateAll(
            [
                'infoType' => 'component_verify_ticket',
                'verifyTicket' => 'ticket@@@Hdryau9LDdadhUDfOinX4wn1Kwwj4Ngmf6kN7fa_m9X5iJTTwNpWbr5odZZiNSw9NnDjuDdnyXATSpe7qknLrQ',
                'zeroUpdatedAt' => 1478077852,
                'zeroExpiresIn' => 7220,
                'oneUpdatedAt' => 1477999082,
                'accessToken' => 'd-BU4sdj6ZCr8WAaaGsMKJsm-XaidO_YlbeJj6w-DrF6Q_G4nhltZ47wKFHuD9eZIPLZ8BuPoxqUjkcjYL5FJ5l_w6i4FVC9DEimWXjNZx5Zb8TP68YWYgQkp3j_45imIGZcAHAECV'
            ],
            ['appId' => self::$appId]
        );
        $this->assertEquals(1, $flag, 'componentInfo update db failed!');
    }

    /**
     * 测试插入异常
     * @expectedException yii\db\IntegrityException
     */
    public function testInsertErr()
    {
        $componentInfo = new ComponentInfo();
        $componentInfo->appId = null;
        $componentInfo->infoType = 'component_verify_ticket';
        $componentInfo->verifyTicket = 'ticket@@@ml8hO4JsNqxX1lFKkH7FURkRV03nLxxPXP4UOz2qhljqQ9tMFlw3XGluXCIiDKfRJRTMZh8H-2ScYhm3ZVHthA';
        $componentInfo->zeroUpdatedAt = 1478003450;
        $componentInfo->accessToken = 'd-BU4sdj6ZCr8WAaaGsMKJsm-XaidO_YlbeJj6w-DrF6Q_G4nhltZ47wKFHuD9eZIPLZ8BuPoxqUjkcjYL5FJ5l_w6i4FVC9DEimWXjNZx5Zb8TP68YWYgQkp3j_45imIGZcAHAECV';
        $componentInfo->zeroExpiresIn = 7200;
        $componentInfo->oneUpdatedAt = 1477999081;
        $componentInfo->insert();

    }

    /**
     * 测试插入异常
     * @expectedException yii\db\IntegrityException
     */
    public function testInsertErr2()
    {
        $this->componentInfoInsert();
        $componentInfo = new ComponentInfo();
        $componentInfo->appId = self::$appId;
        $componentInfo->infoType = 'component_verify_ticket';
        $componentInfo->verifyTicket = 'ticket@@@ml8hO4JsNqxX1lFKkH7FURkRV03nLxxPXP4UOz2qhljqQ9tMFlw3XGluXCIiDKfRJRTMZh8H-2ScYhm3ZVHthA';
        $componentInfo->zeroUpdatedAt = 1478003450;
        $componentInfo->accessToken = 'd-BU4sdj6ZCr8WAaaGsMKJsm-XaidO_YlbeJj6w-DrF6Q_G4nhltZ47wKFHuD9eZIPLZ8BuPoxqUjkcjYL5FJ5l_w6i4FVC9DEimWXjNZx5Zb8TP68YWYgQkp3j_45imIGZcAHAECV';
        $componentInfo->zeroExpiresIn = 7200;
        $componentInfo->oneUpdatedAt = 1477999081;
        $componentInfo->insert();

    }

    /**
     * 查询异常操作
     */
    public function testFindErr()
    {
        $this->componentInfoInsert();
        $this->assertNotEmpty(ComponentInfo::findOne(self::$appId), 'find error');
        $appId = 'asdfdsfdsfadf';
        $this->assertEmpty(ComponentInfo::findOne($appId), 'find invalid param error');
        $appId = '';
        $this->assertEmpty(ComponentInfo::findOne($appId), 'find empty param error');
        $appId = null;
        $this->assertEmpty(ComponentInfo::findOne($appId), 'find null param error');
        $infoType = 'component_verify_ticket';
        $this->assertNotEmpty(ComponentInfo::find()->where(['infoType' => $infoType])->all(), 'find invail type');
        $this->assertEmpty(ComponentInfo::find()->where(['<>', 'infoType', $infoType])->all(), 'find invail type');

    }

    /**
     * 测试componentInfo 表删除操作
     * @throws \Exception
     */
    public function testDelete()
    {
        $this->componentInfoInsert();
        $flag = ComponentInfo::deleteAll(['appId' => self::$appId]);

        $this->assertEquals(true, $flag, 'componentInfo delete fail');
    }

    /**
     * 单元测试 接收微信推送的票据
     */
    public function testSaveTicket()
    {
        $decodeXMLStr = '<xml>'
            . '<AppId>' . self::$appId . '</AppId>'
            . '<CreateTime>' . time() . ' </CreateTime>'
            . '<InfoType>component_verify_ticket</InfoType>'
            . '<ComponentVerifyTicket>ticket@@@Tv3RNWdTaFC8a6DglsbDSjopph_mrYXFi_3oOtWxmD1k9Ge09D2DYld_ZdkAkw4NS1BMHMm7Qy8WGLod8AbE2A</ComponentVerifyTicket>'
            . '</xml>';
        $decodeXMLObj = simplexml_load_string($decodeXMLStr, 'SimpleXMLElement', LIBXML_NOCDATA);
        \Yii::$app->weiXinService->saveVerifyTicket($decodeXMLObj);
        $model = ComponentInfo::findOne(strval($decodeXMLObj->AppId[0]));
        $this->assertNotEmpty($model, 'find err');
        $this->assertEquals(intval($decodeXMLObj->CreateTime[0]), $model->zeroUpdatedAt, 'zeroUpdatedAt param error');
        $this->assertEquals($decodeXMLObj->InfoType[0], $model->infoType, 'infoType param error');
        $this->assertEquals($decodeXMLObj->ComponentVerifyTicket[0], $model->verifyTicket, 'verifyTicket param error');
        $this->assertEquals(true, ComponentInfo::deleteAll(['appId' => strval($decodeXMLObj->AppId[0])]), 'delete err');
    }

    /**
     * 单元测试， 接收授权消息
     */
    public function testSaveAuth()
    {
        $this->componentInfoInsert();
        $decodeXMLStr = '<xml>'
            . '<AppId>' . self::$appId . '</AppId>'
            . '<CreateTime>' . time() . ' </CreateTime>'
            . '<InfoType>AuthorizerAppid</InfoType>'
            . '<AuthorizerAppid>wx4d7309ab40402897</AuthorizerAppid>'
            . '<AuthorizationCodeExpiredTime>1478261479</AuthorizationCodeExpiredTime>'
            . '<AuthorizationCode>queryauthcode@@@9R9uWOwW5eIqjGpq1NIRCF4shm-mQmEphxnYYTrQzT9jil85b8F24r0eHaBQKNMCsXvEvMi5nRSR3TYh27PC4A</AuthorizationCode>'
            . '</xml>';
        $decodeXMLObj = simplexml_load_string($decodeXMLStr, 'SimpleXMLElement', LIBXML_NOCDATA);

        \Yii::$app->weiXinService->handleChangeAuthorization($decodeXMLObj);
        $model = AppInfo::findOne(strval($decodeXMLObj->AuthorizerAppid[0]));
        $this->assertNotEmpty($model, 'find err');
        $this->assertEquals($decodeXMLObj->AppId[0], $model->componentAppId, 'componentAppId param error');
        $this->assertEquals($decodeXMLObj->InfoType[0], $model->infoType, 'infoType param error');
        if ($decodeXMLObj->InfoType[0] != 'unauthorized') {
            $this->assertEquals(strval($decodeXMLObj->AuthorizationCode[0]), $model->authorizationCode, 'AuthorizationCode err');
            $this->assertEquals(intval($decodeXMLObj->AuthorizationCodeExpiredTime[0]), $model->authorizationCodeExpiredTime, 'AuthorizationCode err');
        }
        $this->assertEquals(true, AppInfo::deleteAll(['appId' => strval($decodeXMLObj->AuthorizerAppid[0])]), 'delete err');
        $this->assertEquals(true, ComponentInfo::deleteAll(['appId' => strval($decodeXMLObj->AppId[0])]), 'delete err');
    }

    /**
     * 单元测试， 接收取消授权消息
     */
    public function testSaveUnAuth()
    {
        $this->componentInfoInsert();
        $decodeXMLStr = '<xml>'
            . '<AppId>' . self::$appId . '</AppId>'
            . '<CreateTime>' . time() . ' </CreateTime>'
            . '<InfoType>unauthorized</InfoType>'
            . '<AuthorizerAppid>wx4d7309ab40402897</AuthorizerAppid>'
            . '</xml>';
        $decodeXMLObj = simplexml_load_string($decodeXMLStr, 'SimpleXMLElement', LIBXML_NOCDATA);

        \Yii::$app->weiXinService->handleChangeAuthorization($decodeXMLObj);
        $model = AppInfo::findOne(strval($decodeXMLObj->AuthorizerAppid[0]));
        $this->assertNotEmpty($model, 'find err');
        $this->assertEquals($decodeXMLObj->AppId[0], $model->componentAppId, 'componentAppId param error');
        $this->assertEquals($decodeXMLObj->InfoType[0], $model->infoType, 'infoType param error');
        $this->assertEquals(true, AppInfo::deleteAll(['appId' => strval($decodeXMLObj->AuthorizerAppid[0])]), 'delete err');
        $this->assertEquals(true, ComponentInfo::deleteAll(['appId' => strval($decodeXMLObj->AppId[0])]), 'delete err');
    }

    /**
     * 获取第三方公众平台账号信息的入口
     */
    public function testGetComponentToken()
    {
        $key = 'component_access_token_' . \Yii::$app->params['wxConfig']['appId'];
        $data = 'd-BU4sdj6ZCr8WAaaGsMKJsm-XaidO_YlbeJj6w-DrF6Q_G4nhltZ47wKFHuD9eZIPLZ8BuPoxqUjkcjYL5FJ5l_w6i4FVC9DEimWXjNZx5Zb8TP68YWYgQkp3j_45imIGZcAHAECV';
        \Yii::$app->cache->set($key, $data, 6600);
//        $this->assertNotEmpty(\Yii::$app->weiXinService->getComponentAccessToken(), 'getComToken err');
        $this->componentInfoInsert(\Yii::$app->params['wxConfig']['appId']);
//        $this->assertNotEmpty(\Yii::$app->weiXinService->getComponentAccessToken(), 'getComToken err');
        $appInfo = new AppInfo();
        $appInfo->appId = self::$appId;
        $key2 = 'app_access_token_' . $appInfo->appId;
        \Yii::$app->cache->set($key2, $data, 5500);
        $this->assertNotEmpty(\Yii::$app->weiXinService->getAppAccessToken($appInfo), 'getAppToken err');

        \Yii::$app->cache->delete($key);
        \Yii::$app->cache->delete($key2);
        $this->assertNotEmpty(\Yii::$app->weiXinService->getAppAccessToken($appInfo), 'getAppToken err');
    }

    private function componentInfoInsert($appId = null)
    {
        $componentInfo = new ComponentInfo();
        $componentInfo->appId = $appId ? $appId : self::$appId;
        $componentInfo->infoType = 'component_verify_ticket';
        $componentInfo->verifyTicket = 'ticket@@@J-2aIcFxaHc0OEnuCEdcoTxbNF8Ref_6kcuuJr5FwkwEfRsBKzoTcncnSgs4V2bvHYEGw-hoNCmWNfaIQvSw5Q';
        $componentInfo->zeroUpdatedAt = 1478227855;
        $componentInfo->accessToken = 'LfMXHRIznz_h7-V8wMP4Wm3KWQAIs6CeOxTIkJvxVVHYEUC1NVZApNMOEyuMLVyClOQLFj-0AAw35tNOSJaU93sok5Tt2Ygmxvu_urb7pCX7gyhiIZmKJiyDKotRwENnFTCfADAZNW';
        $componentInfo->zeroExpiresIn = 7200;
        $componentInfo->oneUpdatedAt = 1478176958;
        $componentInfo->insert();
    }

}